{"id":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","dependencies":[{"name":"/home/lukechidubem/Documents/Nodejs/Jonas-Nodejs/Natour/package.json","includedInParent":true,"mtime":1671714110465},{"name":"/home/lukechidubem/Documents/Nodejs/Jonas-Nodejs/Natour/node_modules/stripe/package.json","includedInParent":true,"mtime":1671714109100}],"generated":{"js":"'use strict';\n/**\n * Interface encapsulating the various crypto computations used by the library,\n * allowing pluggable underlying crypto implementations.\n */\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nvar CryptoProvider =\n/*#__PURE__*/\nfunction () {\n  function CryptoProvider() {\n    _classCallCheck(this, CryptoProvider);\n  }\n\n  _createClass(CryptoProvider, [{\n    key: \"computeHMACSignature\",\n    value:\n    /**\n     * Computes a SHA-256 HMAC given a secret and a payload (encoded in UTF-8).\n     * The output HMAC should be encoded in hexadecimal.\n     *\n     * Sample values for implementations:\n     * - computeHMACSignature('', 'test_secret') => 'f7f9bd47fb987337b5796fdc1fdb9ba221d0d5396814bfcaf9521f43fd8927fd'\n     * - computeHMACSignature('\\ud83d\\ude00', 'test_secret') => '837da296d05c4fe31f61d5d7ead035099d9585a5bcde87de952012a78f0b0c43\n     */\n    function computeHMACSignature(payload, secret) {\n      throw new Error('computeHMACSignature not implemented.');\n    }\n    /**\n     * Asynchronous version of `computeHMACSignature`. Some implementations may\n     * only allow support async signature computation.\n     *\n     * Computes a SHA-256 HMAC given a secret and a payload (encoded in UTF-8).\n     * The output HMAC should be encoded in hexadecimal.\n     *\n     * Sample values for implementations:\n     * - computeHMACSignature('', 'test_secret') => 'f7f9bd47fb987337b5796fdc1fdb9ba221d0d5396814bfcaf9521f43fd8927fd'\n     * - computeHMACSignature('\\ud83d\\ude00', 'test_secret') => '837da296d05c4fe31f61d5d7ead035099d9585a5bcde87de952012a78f0b0c43\n     */\n\n  }, {\n    key: \"computeHMACSignatureAsync\",\n    value: function computeHMACSignatureAsync(payload, secret) {\n      throw new Error('computeHMACSignatureAsync not implemented.');\n    }\n  }]);\n\n  return CryptoProvider;\n}();\n\nmodule.exports = CryptoProvider;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":1,"column":0}},{"generated":{"line":2,"column":0},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":2,"column":0}},{"name":"CryptoProvider","generated":{"line":19,"column":4},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":6,"column":6}},{"generated":{"line":29,"column":0},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":7,"column":2}},{"generated":{"line":37,"column":0},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":15,"column":2}},{"name":"payload","generated":{"line":37,"column":34},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":15,"column":23}},{"generated":{"line":37,"column":41},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":15,"column":2}},{"name":"secret","generated":{"line":37,"column":43},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":15,"column":32}},{"generated":{"line":37,"column":49},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":15,"column":2}},{"generated":{"line":37,"column":51},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":15,"column":40}},{"generated":{"line":38,"column":0},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":16,"column":4}},{"generated":{"line":38,"column":12},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":16,"column":10}},{"name":"Error","generated":{"line":38,"column":16},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":16,"column":14}},{"generated":{"line":38,"column":21},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":16,"column":10}},{"generated":{"line":38,"column":22},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":16,"column":20}},{"generated":{"line":38,"column":61},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":16,"column":10}},{"generated":{"line":38,"column":62},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":16,"column":4}},{"generated":{"line":39,"column":0},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":17,"column":3}},{"generated":{"line":40,"column":0},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":18,"column":2}},{"generated":{"line":54,"column":11},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":29,"column":2}},{"name":"payload","generated":{"line":54,"column":46},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":29,"column":28}},{"generated":{"line":54,"column":53},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":29,"column":2}},{"name":"secret","generated":{"line":54,"column":55},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":29,"column":37}},{"generated":{"line":54,"column":61},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":29,"column":2}},{"generated":{"line":54,"column":63},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":29,"column":45}},{"generated":{"line":55,"column":0},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":30,"column":4}},{"generated":{"line":55,"column":12},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":30,"column":10}},{"name":"Error","generated":{"line":55,"column":16},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":30,"column":14}},{"generated":{"line":55,"column":21},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":30,"column":10}},{"generated":{"line":55,"column":22},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":30,"column":20}},{"generated":{"line":55,"column":66},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":30,"column":10}},{"generated":{"line":55,"column":67},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":30,"column":4}},{"generated":{"line":56,"column":0},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":31,"column":3}},{"name":"module","generated":{"line":62,"column":0},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":33,"column":0}},{"generated":{"line":62,"column":6},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":33,"column":6}},{"name":"exports","generated":{"line":62,"column":7},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":33,"column":7}},{"generated":{"line":62,"column":14},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":33,"column":0}},{"name":"CryptoProvider","generated":{"line":62,"column":17},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":33,"column":17}},{"generated":{"line":62,"column":31},"source":"../../node_modules/stripe/lib/crypto/CryptoProvider.js","original":{"line":33,"column":0}}],"sources":{"../../node_modules/stripe/lib/crypto/CryptoProvider.js":"'use strict';\n/**\n * Interface encapsulating the various crypto computations used by the library,\n * allowing pluggable underlying crypto implementations.\n */\nclass CryptoProvider {\n  /**\n   * Computes a SHA-256 HMAC given a secret and a payload (encoded in UTF-8).\n   * The output HMAC should be encoded in hexadecimal.\n   *\n   * Sample values for implementations:\n   * - computeHMACSignature('', 'test_secret') => 'f7f9bd47fb987337b5796fdc1fdb9ba221d0d5396814bfcaf9521f43fd8927fd'\n   * - computeHMACSignature('\\ud83d\\ude00', 'test_secret') => '837da296d05c4fe31f61d5d7ead035099d9585a5bcde87de952012a78f0b0c43\n   */\n  computeHMACSignature(payload, secret) {\n    throw new Error('computeHMACSignature not implemented.');\n  }\n  /**\n   * Asynchronous version of `computeHMACSignature`. Some implementations may\n   * only allow support async signature computation.\n   *\n   * Computes a SHA-256 HMAC given a secret and a payload (encoded in UTF-8).\n   * The output HMAC should be encoded in hexadecimal.\n   *\n   * Sample values for implementations:\n   * - computeHMACSignature('', 'test_secret') => 'f7f9bd47fb987337b5796fdc1fdb9ba221d0d5396814bfcaf9521f43fd8927fd'\n   * - computeHMACSignature('\\ud83d\\ude00', 'test_secret') => '837da296d05c4fe31f61d5d7ead035099d9585a5bcde87de952012a78f0b0c43\n   */\n  computeHMACSignatureAsync(payload, secret) {\n    throw new Error('computeHMACSignatureAsync not implemented.');\n  }\n}\nmodule.exports = CryptoProvider;\n"},"lineCount":null}},"error":null,"hash":"f5bbb0aa50f6415c13d2a487aac9c592","cacheData":{"env":{}}}